import os
import psutil
import subprocess
from datetime import datetime
from tabulate import tabulate
from colorama import Fore, Style, init
import json

# –¶–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥
init(autoreset=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
REPORT_FILE = 'task_spy_report.json'
TARGET_EXTENSIONS = ['.py', '.bat', '.ps1']
SUSPICIOUS_LOCATIONS = ['\\AppData\\', '\\Temp\\', '\\ProgramData\\']
SUSPICIOUS_NAMES = ['svshost', 'chrome_update', 'winlogin', 'systemhost', 'updatehost', 'spoolsvc']
SUSPICIOUS_EXTENSIONS = ['.pif', '.scr', '.com', '.cpl', '.dat']

# ---------- –§–£–ù–ö–¶–ò–ò ----------

def find_suspects():
    suspects = []
    for proc in psutil.process_iter(['pid', 'name', 'exe', 'cmdline', 'username', 'ppid']):
        try:
            cmdline = ' '.join(proc.info['cmdline']) if proc.info['cmdline'] else ''
            for ext in TARGET_EXTENSIONS:
                if ext in cmdline.lower():
                    suspects.append({
                        'pid': proc.info['pid'],
                        'name': proc.info['name'],
                        'cmd': cmdline,
                        'exe': proc.info['exe'],
                        'username': proc.info['username'],
                        'ppid': proc.info['ppid'],
                    })
                    break
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            continue
    return suspects

def get_scheduler_tasks():
    result = subprocess.run(["schtasks"], capture_output=True, text=True, shell=True)
    lines = result.stdout.splitlines()[3:]
    scripts = []
    for line in lines:
        if any(ext in line.lower() for ext in TARGET_EXTENSIONS):
            scripts.append(line.strip())
    return scripts

def print_suspects(suspects):
    if not suspects:
        print(Fore.GREEN + "–ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤.")
        return

    headers = ["PID", "–ò–º—è", "–ö–æ–º–∞–Ω–¥–∞", "–ó–∞–ø—É—â–µ–Ω –æ—Ç", "PID –†–æ–¥–∏—Ç–µ–ª—è"]
    table = [
        [p['pid'], p['name'], p['cmd'], p['username'], p['ppid']]
        for p in suspects
    ]
    print(Fore.YELLOW + "[–û–¢–ö–†–´–¢–´–ï –ü–†–û–¶–ï–°–°–´]\n")
    print(tabulate(table, headers=headers, tablefmt='fancy_grid'))

def save_report(suspects, scheduled, malware=None):
    now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    report = {
        'timestamp': now,
        'processes': suspects,
        'scheduled': scheduled,
        'malware_candidates': malware or []
    }
    with open(REPORT_FILE, 'w', encoding='utf-8') as f:
        json.dump(report, f, indent=4, ensure_ascii=False)
    print(Fore.CYAN + f"\n[‚úî] –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {REPORT_FILE}")

def kill_process(pid):
    try:
        proc = psutil.Process(pid)
        proc.terminate()
        proc.wait(3)
        print(Fore.RED + f"–ü—Ä–æ—Ü–µ—Å—Å {pid} –∑–∞–≤–µ—Ä—à—ë–Ω.")
    except Exception as e:
        print(Fore.RED + f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")

def suspend_process(pid):
    try:
        proc = psutil.Process(pid)
        proc.suspend()
        print(Fore.MAGENTA + f"–ü—Ä–æ—Ü–µ—Å—Å {pid} –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    except Exception as e:
        print(Fore.RED + f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")

def interact_menu(suspects):
    if not suspects:
        return

    print(Fore.BLUE + "\n–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è:")
    for i, proc in enumerate(suspects):
        print(f"{i}: PID {proc['pid']} | {proc['cmd'][:60]}")

    choice = input("\n–ù–æ–º–µ—Ä –ø—Ä–æ—Ü–µ—Å—Å–∞ ('q' –¥–ª—è –≤—ã—Ö–æ–¥–∞): ").strip()
    if choice == 'q':
        return

    try:
        index = int(choice)
        target = suspects[index]
        action = input("1 - –ó–∞–≤–µ—Ä—à–∏—Ç—å, 2 - –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å, Enter - –Ω–∏—á–µ–≥–æ: ").strip()
        if action == '1':
            kill_process(target['pid'])
        elif action == '2':
            suspend_process(target['pid'])
    except Exception as e:
        print(Fore.RED + f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞: {e}")

# -------- –ù–ê–® –ê–ù–¢–ò–í–ò–†–£–°–ù–´–ô –†–ï–ñ–ò–ú --------

def is_suspicious_path(path):
    if not path:
        return False
    path_lower = path.lower()
    return any(sub in path_lower for sub in SUSPICIOUS_LOCATIONS)

def is_suspicious_name(name):
    name = (name or '').lower()
    return any(fake in name for fake in SUSPICIOUS_NAMES)

def is_suspicious_ext(path):
    return any(path.lower().endswith(ext) for ext in SUSPICIOUS_EXTENSIONS)

def get_process_name(pid):
    try:
        return psutil.Process(pid).name()
    except (psutil.NoSuchProcess, psutil.AccessDenied):
        return "N/A"

def find_malware_candidates():
    suspects = []
    for proc in psutil.process_iter(attrs=['pid', 'name', 'exe', 'cmdline', 'username', 'ppid', 'create_time']):
        reasons = []
        try:
            name = proc.info['name'] or ''
            exe = proc.info['exe'] or ''
            cmdline = ' '.join(proc.info['cmdline']) if proc.info['cmdline'] else ''
            ppid = proc.info['ppid']
            username = proc.info['username']

            if is_suspicious_path(exe):
                reasons.append("üìÅ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ")
            if is_suspicious_name(name):
                reasons.append("üïµÔ∏è –ü–æ—Ö–æ–∂–µ –Ω–∞ —Ñ–∞–ª—å—à–∏–≤–æ–µ –∏–º—è —Å–∏—Å—Ç–µ–º—ã")
            if is_suspicious_ext(exe):
                reasons.append("üì¶ –ù–µ–æ–±—ã—á–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ")
            if ppid in (0, 4):
                reasons.append("üß¨ –†–æ–¥–∏—Ç–µ–ª—å PID –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π")

            if reasons:
                suspects.append({
                    'pid': proc.info['pid'],
                    'name': name,
                    'exe': exe,
                    'cmdline': cmdline,
                    'username': username,
                    'ppid': ppid,
                    'ppname': get_process_name(ppid),
                    'start_time': datetime.fromtimestamp(proc.info['create_time']).strftime("%Y-%m-%d %H:%M:%S") if proc.info.get('create_time') else 'n/a',
                    'reasons': reasons
                })

        except (psutil.NoSuchProcess, psutil.AccessDenied, ValueError):
            continue
    return suspects

def print_malware_section(candidates):
    print("\n" + Fore.RED + "‚ïê" * 70)
    print(Fore.RED + "        –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–ï –ü–†–û–¶–ï–°–°–´ (malware-—Ä–µ–∂–∏–º)")
    print("‚ïê" * 70)

    if not candidates:
        print(Fore.GREEN + "–ù–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    headers = ["#", "PID", "–ò–º—è", "–ü—É—Ç—å", "–†–æ–¥. PID", "–†–æ–¥. –ò–º—è", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "–í—Ä–µ–º—è", "–ü—Ä–∏—á–∏–Ω—ã"]
    table = []
    for idx, proc in enumerate(candidates):
        reasons_summary = "\n".join(proc['reasons'])
        table.append([
            idx,
            proc['pid'],
            proc['name'] or "‚Äî",
            proc['exe'] or "‚Äî",
            proc['ppid'],
            proc['ppname'],
            proc['username'] or "‚Äî",
            proc['start_time'],
            reasons_summary
        ])

    print(tabulate(table, headers=headers, tablefmt='fancy_grid'))

    interact_malware_menu(candidates)

def interact_malware_menu(candidates):
    try:
        index = input(Fore.CYAN + "\n–í—ã–±–µ—Ä–∏ # –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π (–∏–ª–∏ q): ")
        if index.lower() == "q" or not index:
            return
        idx = int(index)
        target = candidates[idx]
        print(Fore.MAGENTA + f"\n‚ñ∂ –ü—Ä–æ—Ü–µ—Å—Å –≤—ã–±—Ä–∞–Ω:  PID={target['pid']} ({target['name']})")
        print(Fore.LIGHTBLACK_EX + f"–ü—É—Ç—å: {target['exe']}")
        print(Fore.LIGHTBLACK_EX + f"Command Line: {target['cmdline']}")
        print(Fore.LIGHTBLACK_EX + f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {target['username']}")
        print(Fore.LIGHTBLACK_EX + f"–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {target['start_time']}")
        print(Fore.LIGHTBLACK_EX + f"–ü—Ä–∏—á–∏–Ω—ã:\n - " + '\n - '.join(target['reasons']))

        action = input(Fore.CYAN + "\n1 - –ó–∞–≤–µ—Ä—à–∏—Ç—å, 2 - –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å, Enter - –Ω–∏—á–µ–≥–æ: ").strip()
        if action == '1':
            kill_process(target['pid'])
        elif action == '2':
            suspend_process(target['pid'])

    except Exception as e:
        print(Fore.RED + f"–û—à–∏–±–∫–∞: {e}")

# -------- MAIN --------

def main():
    print(Fore.CYAN + "üëÅ‚Äçüó® Task Spy: –ú–æ–Ω–∏—Ç–æ—Ä –∑–∞–¥–∞—á –∏ –ø–æ–∏—Å–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤\n")

    suspects = find_suspects()
    scheduled = get_scheduler_tasks()

    print_suspects(suspects)

    if scheduled:
        print(Fore.YELLOW + "\n[–ù–ê–ô–î–ï–ù–´ –ó–ê–î–ê–ß–ò –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê]")
        for task in scheduled:
            print(Fore.WHITE + f"‚Ä¢ {task}")
    else:
        print(Fore.GREEN + "–ù–µ—Ç –∑–∞–¥–∞—á –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–æ —Å–∫—Ä–∏–ø—Ç–∞–º–∏.")

    malware_candidates = find_malware_candidates()
    print_malware_section(malware_candidates)
    save_report(suspects, scheduled, malware_candidates)
    interact_menu(suspects)

if __name__ == "__main__":
    main()
