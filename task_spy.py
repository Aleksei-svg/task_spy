import os
import psutil
import subprocess
from datetime import datetime
from tabulate import tabulate
from colorama import Fore, Style, init
import json

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ü–≤–µ—Ç–∞
init(autoreset=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
REPORT_FILE = 'task_spy_report.json'
TARGET_EXTENSIONS = ['.py', '.bat', '.ps1']
SUSPICIOUS_LOCATIONS = ['\\AppData\\', '\\Temp\\', '\\ProgramData\\']
SUSPICIOUS_NAMES = ['svshost', 'chrome_update', 'winlogin', 'systemhost', 'updatehost', 'spoolsvc']
SUSPICIOUS_EXTENSIONS = ['.pif', '.scr', '.com', '.cpl', '.dat']

# üîç –ü–æ–∏—Å–∫ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
def find_suspects():
    suspects = []
    for proc in psutil.process_iter(['pid', 'name', 'exe', 'cmdline', 'username', 'ppid']):
        try:
            cmdline = ' '.join(proc.info['cmdline']) if proc.info['cmdline'] else ''
            for ext in TARGET_EXTENSIONS:
                if ext in cmdline.lower():
                    suspects.append({
                        'pid': proc.info['pid'],
                        'name': proc.info['name'],
                        'cmd': cmdline,
                        'exe': proc.info['exe'],
                        'username': proc.info['username'],
                        'ppid': proc.info['ppid'],
                    })
                    break
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            continue
    return suspects

# üìÜ –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
def get_scheduler_tasks():
    result = subprocess.run(["schtasks"], capture_output=True, text=True, shell=True)
    lines = result.stdout.splitlines()[3:]
    scripts = []
    for line in lines:
        if any(ext in line.lower() for ext in TARGET_EXTENSIONS):
            scripts.append(line.strip())
    return scripts

# üñ• –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
def print_suspects(suspects):
    if not suspects:
        print(Fore.GREEN + "–ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤.")
        return

    headers = ["PID", "–ò–º—è", "–ö–æ–º–∞–Ω–¥–∞", "–ó–∞–ø—É—â–µ–Ω –æ—Ç", "PID –†–æ–¥–∏—Ç–µ–ª—è"]
    table = [
        [p['pid'], p['name'], p['cmd'], p['username'], p['ppid']]
        for p in suspects
    ]
    print(Fore.YELLOW + "[–û–¢–ö–†–´–¢–´–ï –ü–†–û–¶–ï–°–°–´]\n")
    print(tabulate(table, headers=headers, tablefmt='fancy_grid'))

# üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
def save_report(suspects, scheduled, malware=None):
    now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    report = {
        'timestamp': now,
        'processes': suspects,
        'scheduled': scheduled,
        'malware_candidates': malware or []
    }
    with open(REPORT_FILE, 'w', encoding='utf-8') as f:
        json.dump(report, f, indent=4, ensure_ascii=False)
    print(Fore.CYAN + f"\n[‚úî] –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {REPORT_FILE}")

# üî™ –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å
def kill_process(pid):
    try:
        proc = psutil.Process(pid)
        proc.terminate()
        proc.wait(3)
        print(Fore.RED + f"–ü—Ä–æ—Ü–µ—Å—Å {pid} –∑–∞–≤–µ—Ä—à—ë–Ω.")
    except Exception as e:
        print(Fore.RED + f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")

# ‚õî –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å
def suspend_process(pid):
    try:
        proc = psutil.Process(pid)
        proc.suspend()
        print(Fore.MAGENTA + f"–ü—Ä–æ—Ü–µ—Å—Å {pid} –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    except Exception as e:
        print(Fore.RED + f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")

# üìã –ú–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–≤–æ–∏–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏
def interact_menu(suspects):
    if not suspects:
        return

    print(Fore.BLUE + "\n–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è:")
    for i, proc in enumerate(suspects):
        print(f"{i}: PID {proc['pid']} | {proc['cmd'][:60]}")

    choice = input("\n–ù–æ–º–µ—Ä –ø—Ä–æ—Ü–µ—Å—Å–∞ ('q' –¥–ª—è –≤—ã—Ö–æ–¥–∞): ").strip()
    if choice == 'q':
        return

    try:
        index = int(choice)
        target = suspects[index]
        action = input("1 - –ó–∞–≤–µ—Ä—à–∏—Ç—å, 2 - –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å, Enter - –Ω–∏—á–µ–≥–æ: ").strip()
        if action == '1':
            kill_process(target['pid'])
        elif action == '2':
            suspend_process(target['pid'])
    except Exception as e:
        print(Fore.RED + f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞: {e}")

# ü¶† –ü–æ–∏—Å–∫ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ malware
def is_suspicious_path(path):
    if not path:
        return False
    path_lower = path.lower()
    return any(sub in path_lower for sub in SUSPICIOUS_LOCATIONS)

def is_suspicious_name(name):
    name = name.lower()
    return any(fake in name for fake in SUSPICIOUS_NAMES)

def is_suspicious_ext(path):
    return any(path.lower().endswith(ext) for ext in SUSPICIOUS_EXTENSIONS)

def find_malware_candidates():
    suspects = []
    for proc in psutil.process_iter(['pid', 'name', 'exe', 'cmdline', 'username', 'ppid']):
        reasons = []
        try:
            name = proc.info['name'] or ''
            exe = proc.info['exe'] or ''
            ppid = proc.info['ppid']
            
            if is_suspicious_path(exe):
                reasons.append("–ó–∞–ø—É—â–µ–Ω –∏–∑ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏")
            if is_suspicious_name(name):
                reasons.append("–ò–º—è –ø–æ—Ö–æ–∂–µ –Ω–∞ –ø–æ–¥–¥–µ–ª—å–Ω–æ–µ —Å–∏—Å—Ç–µ–º–Ω–æ–µ")
            if is_suspicious_ext(exe):
                reasons.append("–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ")
            if ppid in (0, 4):
                reasons.append("–ù–µ–æ–±—ã—á–Ω—ã–π —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π PID")
            
            if reasons:
                suspects.append({
                    'pid': proc.info['pid'],
                    'name': name,
                    'exe': exe,
                    'username': proc.info['username'],
                    'ppid': ppid,
                    'reasons': reasons
                })
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            continue

    return suspects

# üßæ –í—ã–≤–æ–¥ –æ–ø–∞—Å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
def print_malware_section(candidates):
    print("\n" + Fore.RED + "‚ïê" * 48)
    print(Fore.RED + "     –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–ï –ü–†–û–¶–ï–°–°–´ (malware-—Ä–µ–∂–∏–º)    ")
    print("‚ïê" * 48)

    if not candidates:
        print(Fore.GREEN + "–ù–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    for i, proc in enumerate(candidates):
        print(Fore.LIGHTRED_EX + f"\n[{i}] PID={proc['pid']} | Name={proc['name']}")
        print(Fore.WHITE + f"     –ü—É—Ç—å: {proc['exe']}")
        print(f"     –†–æ–¥–∏—Ç–µ–ª—å: {proc['ppid']} | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {proc['username']}")
        for r in proc['reasons']:
            print(Fore.YELLOW + f"     ‚Üí {r}")

    interact_malware_menu(candidates)

# ‚ò£Ô∏è –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏
def interact_malware_menu(candidates):
    try:
        index = input(Fore.CYAN + "\n–í—ã–±–µ—Ä–∏ # –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π (–∏–ª–∏ q): ")
        if index.lower() == "q":
            return
        idx = int(index)
        target = candidates[idx]
        print(Fore.MAGENTA + f"–ü—Ä–æ—Ü–µ—Å—Å {target['pid']} –≤—ã–±—Ä–∞–Ω ({target['name']})")
        
        action = input("1 - –ó–∞–≤–µ—Ä—à–∏—Ç—å, 2 - –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å, Enter - –Ω–∏—á–µ–≥–æ: ").strip()
        if action == '1':
            kill_process(target['pid'])
        elif action == '2':
            suspend_process(target['pid'])

    except Exception as e:
        print(Fore.RED + f"–û—à–∏–±–∫–∞: {e}")

# üöÄ –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
def main():
    print(Fore.CYAN + "üëÅ‚Äçüó® Task Spy: –ú–æ–Ω–∏—Ç–æ—Ä –∑–∞–¥–∞—á –∏ –ø–æ–∏—Å–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤\n")

    suspects = find_suspects()
    scheduled = get_scheduler_tasks()

    print_suspects(suspects)

    if scheduled:
        print(Fore.YELLOW + "\n[–ù–ê–ô–î–ï–ù–´ –ó–ê–î–ê–ß–ò –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê]")
        for task in scheduled:
            print(Fore.WHITE + f"‚Ä¢ {task}")
    else:
        print(Fore.GREEN + "–ù–µ—Ç –∑–∞–¥–∞—á –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–æ —Å–∫—Ä–∏–ø—Ç–∞–º–∏.")

    malware_candidates = find_malware_candidates()
    print_malware_section(malware_candidates)

    save_report(suspects, scheduled, malware_candidates)
    interact_menu(suspects)

if __name__ == "__main__":
    main()
