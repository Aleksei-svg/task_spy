import os
import psutil
import subprocess
from datetime import datetime
from tabulate import tabulate
from colorama import Fore, Style, init
import json

init(autoreset=True)

REPORT_FILE = 'task_spy_report.json'
TARGET_EXTENSIONS = ['.py', '.bat', '.ps1']


def find_suspects():
    suspects = []
    for proc in psutil.process_iter(['pid', 'name', 'exe', 'cmdline', 'username', 'ppid']):
        try:
            cmdline = ' '.join(proc.info['cmdline']) if proc.info['cmdline'] else ''
            for ext in TARGET_EXTENSIONS:
                if ext in cmdline.lower():
                    suspects.append({
                        'pid': proc.info['pid'],
                        'name': proc.info['name'],
                        'cmd': cmdline,
                        'exe': proc.info['exe'],
                        'username': proc.info['username'],
                        'ppid': proc.info['ppid'],
                    })
                    break
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            continue
    return suspects


def get_scheduler_tasks():
    result = subprocess.run(["schtasks"], capture_output=True, text=True, shell=True)
    lines = result.stdout.splitlines()[3:]  # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏
    scripts = []
    for line in lines:
        if any(ext in line.lower() for ext in TARGET_EXTENSIONS):
            scripts.append(line.strip())
    return scripts


def print_suspects(suspects):
    if not suspects:
        print(Fore.GREEN + "–ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤.")
        return

    headers = ["PID", "–ò–º—è", "–ö–æ–º–∞–Ω–¥–∞", "–ó–∞–ø—É—â–µ–Ω –æ—Ç", "PID –†–æ–¥–∏—Ç–µ–ª—è"]
    table = [
        [p['pid'], p['name'], p['cmd'], p['username'], p['ppid']]
        for p in suspects
    ]
    print(Fore.YELLOW + "[–û–¢–ö–†–´–¢–´–ï –ü–†–û–¶–ï–°–°–´]\n")
    print(tabulate(table, headers=headers, tablefmt='fancy_grid'))


def save_report(suspects, scheduled):
    now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    report = {
        'timestamp': now,
        'processes': suspects,
        'scheduled': scheduled
    }
    with open(REPORT_FILE, 'w', encoding='utf-8') as f:
        json.dump(report, f, indent=4, ensure_ascii=False)
    print(Fore.CYAN + f"\n[‚úî] –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {REPORT_FILE}")


def kill_process(pid):
    try:
        proc = psutil.Process(pid)
        proc.terminate()
        proc.wait(3)
        print(Fore.RED + f"–ü—Ä–æ—Ü–µ—Å—Å {pid} –∑–∞–≤–µ—Ä—à—ë–Ω.")
    except Exception as e:
        print(Fore.RED + f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")


def suspend_process(pid):
    try:
        proc = psutil.Process(pid)
        proc.suspend()
        print(Fore.MAGENTA + f"–ü—Ä–æ—Ü–µ—Å—Å {pid} –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    except Exception as e:
        print(Fore.RED + f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")


def interact_menu(suspects):
    if not suspects:
        return

    print(Fore.BLUE + "\n–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è:")
    for i, proc in enumerate(suspects):
        print(f"{i}: PID {proc['pid']} | {proc['cmd'][:60]}")

    choice = input("\n–ù–æ–º–µ—Ä –ø—Ä–æ—Ü–µ—Å—Å–∞ ('q' –¥–ª—è –≤—ã—Ö–æ–¥–∞): ").strip()
    if choice == 'q':
        return

    try:
        index = int(choice)
        target = suspects[index]
        action = input("1 - –ó–∞–≤–µ—Ä—à–∏—Ç—å, 2 - –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å, Enter - –Ω–∏—á–µ–≥–æ: ").strip()
        if action == '1':
            kill_process(target['pid'])
        elif action == '2':
            suspend_process(target['pid'])
    except Exception as e:
        print(Fore.RED + f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞: {e}")


def main():
    print(Fore.CYAN + "üëÅ‚Äçüó® Task Spy: –ü–æ–∏—Å–∫ —Å–∫—Ä–∏–ø—Ç–æ–≤-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ –∑–∞–¥–∞—á –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞\n")

    suspects = find_suspects()
    scheduled = get_scheduler_tasks()

    print_suspects(suspects)

    if scheduled:
        print(Fore.YELLOW + "\n[–ù–ê–ô–î–ï–ù–´ –ó–ê–î–ê–ß–ò –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê]")
        for task in scheduled:
            print(Fore.WHITE + f"‚Ä¢ {task}")
    else:
        print(Fore.GREEN + "–ù–µ—Ç –∑–∞–¥–∞—á –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–æ —Å–∫—Ä–∏–ø—Ç–∞–º–∏.")

    save_report(suspects, scheduled)
    interact_menu(suspects)


if __name__ == "__main__":
    main()
